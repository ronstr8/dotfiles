
[[ "$__LIBINFO" ]] || declare __LIBINFO='' ;

declare DEFAULT_BASHLIB="$HOME/.bash/lib" ;

declare __RDELIM=':' ;

declare -i LD_QUERY=$(( 0 - 1 )) ; ## XXX Personal preference-- that's why.  XXX
declare -i LD_FORCE=$(( 0 + 1 )) ; ## XXX Ditto. XXX

## __ldupdate $resource $fileName $lastLoadedAt
#       Output information on the named library.
#
# @param $resource the resource provided by some library.
# @param $fileName provider of $resource.
# @param $lastLoadedAt last (%Y%m%d%H%M%S) time the resource was loaded.
#
# @stdout null
# @stderr pass
# @return true/success if we had any info, false/failure otherwise.
##
unset -f __ldupdate ; function __ldupdate() {
    declare    resource="${1:?${FUNCNAME[0]}: Missing 'resource'}" ;
    declare    fileName="${2:?${FUNCNAME[0]}: Missing 'fileName'}" ;
    declare -i lastLoadedAt="${3:?${FUNCNAME[0]}: Missing 'lastLoadedAt'}" ;

    declare record="${__RDELIM}${resource}=${fileName}@${lastLoadedAt}${__RDELIM}" ;
    declare stripper="${__RDELIM}${resource}[^${__RDELIM}]\\+${__RDELIM}" ;

    __LIBINFO="$( sed -e "s/$stripper//g;" <<< $__LIBINFO )${record}" ;
} ;

## __ldd $resource [$fileName]
#       Output information on the named library.
#
# @param $resource the resource provided by some library.
#
# @stdout "$fileName@$lastLoaded" or "$HOME/.bash/lib/$resource.bash@0" if no info found.
# @return true/success if we had any info, false/failure otherwise.
##
unset -f __ldd ; function __ldd() {
    declare resource="${1:?${FUNCNAME[0]}: Missing 'resource'}" ;
    declare customFileName="${2:-}" ;

#   echo "__ldd $@" >&2 ;

    declare standardFileName="${__BASHLIB:-$DEFAULT_BASHLIB}/${resource}.bash" ;
    declare recordRE="(${__RDELIM}((${resource})=([^@]+)@([0-9]+))${__RDELIM})" ;

    if [[ ! $__LIBINFO =~ $recordRE ]] ; then
#       echo "customFileName=$customFileName;standardFileName=$standardFileName;" >&2
        echo "${customFileName:-$standardFileName}@0" ;
        false ; return ;
    fi

    declare savedFileName=${BASH_REMATCH[4]} ;
    declare lastLoaded=${BASH_REMATCH[5]} ;

    declare finalFileName ;

    if [[ "$customFileName" ]] ; then
        if [[ $customFileName != $savedFileName ]] ; then
            finalFileName=$customFileName ;
            lastLoaded=0 ;
        else
            finalFileName=$savedFileName ;
        fi
    elif [[ "$savedFileName" ]] ; then
        finalFileName="$savedFileName" ;
    else
        finalFileName="$standardFileName" ; ## Not reachable.
    fi

    echo "${finalFileName/${__RDELIM}}@${lastLoaded/${__RDELIM}}" ;
} ;

## __ld $resource [$fileName[ $lastLoaded]]
#
#  __ld 'FUNK'
#   Reload the file providing the given resource if its record in __LIBINFO indicates that it needs to be.
#
#  __ld 'FUNK' $LD_QUERY "$HOME/.bash/lib/funk.bash"
#   Query whether or not the given file needs reloaded.
#
#  __ld 'FUNK' $LD_FORCE "$HOME/.bash/lib/funk.bash"
#   Force the unconditional reload of the given file.
#
#  __ld 'FUNK' $( date +%Y%m%d%H%M%S )
#   Update the last-loaded time in __LIBINFO to the given timestamp, but do _not_ reload the file.
#
# @param $resource the resource provided by some library.
# @param $lastLoaded new load time of resource if -ge mtime of provider file.
# @param $fileName provider of $resource; sourced iff $lastLoaded -lt its mtime.
#
# @stdout is normally silent.
# @stderr output from any sourcing of files.
# @return false/failure if the resource should be reloaded, true/success otherwise.
##
unset -f __ld ; function __ld() {
    declare resource="${1:?${FUNCNAME[0]}: Missing 'resource'}" ;
    declare actionCode="${2:-}" ;
    declare givenFn="${3:-}" ;

    if [[ -z "$givenFn" && $resource =~ \.bash$ ]] ; then
        givenFn=$resource ; resource=${givenFn##*/} ; resource=${resource%.bash} ;
    fi

    declare -a resourceInfo ; IFS='@' read -a resourceInfo < <( __ldd "$resource" "$givenFn" ) ;
    declare    fileName=${givenFn:-${resourceInfo[0]}} ;

    [[ -f "$fileName" ]] || return 1 ;

    declare -i lastLoadedAt=${actionCode:-${resourceInfo[1]}} ;
    declare -i lastModified=$( date +%Y%m%d%H%M%S -r "$fileName" ) ;

#   echo "resource=$resource;fileName=$fileName;lastLoadedAt=$lastLoadedAt;lastModified=$lastModified" >&2;

    declare -i srcUpdated=$(( lastLoadedAt < lastModified )) ;
    declare -i wantedReload=0 shouldReload=0 ;

    if [[ ${actionCode:-0} -eq $LD_FORCE ]] ; then
        wantedReload=$srcUpdated ;
        shouldReload=1 ;
    elif (( srcUpdated )) ; then
        wantedReload=$srcUpdated ;
        shouldReload=$(( ${actionCode:-0} == LD_QUERY ? 0 : 1 )) ;
    fi

    if (( shouldReload )) ; then
        source "$fileName" && lastLoadedAt=$( date +%Y%m%d%H%M%S ) ; ## XXX Die on fail?
    fi

    __ldupdate "$resource" "$fileName" $lastLoadedAt ;

    return $wantedReload ;
} ;

## pingLib $resource
##      Should the named resource be reloaded?
#
# @param $resource a resource provided by some library.
#
# @stdout is normally silent.
# @stderr receives errors encountered while sourcing library files.
# @return true if the latest version of the resource is already loaded.
##
unset -f pingLib ; function pingLib() {
#   echo "pingLib $@ ..." >&2;
    declare resource="${1:?${FUNCNAME[0]}: Missing 'resource'}" ;
    __ld $resource $LD_QUERY ;
} ;

## requireLib $resource
##      Load (or reload) the given resource if it needs to be.
#
# @param $resource a resource provided by some library.
#
# @stdout is dumped to /dev/null.
# @stderr receives errors encountered while sourcing library files.
# @return true if the latest version of the resource is already loaded.
##
unset -f requireLib ; function requireLib() {
#   echo "requireLib $@ ..." >&2;
    declare resource="${1:?${FUNCNAME[0]}: Missing 'resource'}" ;
    __ld $resource >/dev/null ;
} ;
unset -f needsLib ; function needsLib() { requireLib "$@" ; } ;

## reloadLib $resource
##      Force reload of the given resource.
#
# @param $resource a resource provided by some library.
#
# @stdout is dumped to /dev/null.
# @stderr receives errors encountered while sourcing library files.
# @return true if the latest version of the resource is already loaded.
##
unset -f reloadLib ; function reloadLib() {
#   echo "reloadLib $@ ..." >&2;
    declare resource="${1:?${FUNCNAME[0]}: Missing 'resource'}" ;
    __ld $resource $LD_FORCE >/dev/null ;
} ;
unset -f forceLib ; function forceLib() { reloadLib "$@" ; } ;

## touchLib $resource
##      Set the last-loaded time of the given resource to the current time.
#
# @stdout is normally silent.
# @stderr receives errors encountered while sourcing library files.
# @param $resource a resource provided by some library.
##
unset -f touchLib ; function touchLib() {
#   echo "touchLib $@ ..." >&2;
    declare resource="${1:?${FUNCNAME[0]}: Missing 'resource'}" ;
    __ld $resource $( date +%Y%m%d%H%M%S ) ;
} ;

unset -f __ldinit ; function __ldinit() {
    declare bashLib=${__BASHLIB:-$DEFAULT_BASHLIB} ;

    declare -a loadable ;
    declare    file ;

    while read -d '' file ; do
        if [[ -x "$file" ]] ; then
            loadable[${#loadable[@]}]=$file ;
        fi
    done  < <( find $bashLib -type f -name '*.bash' | xargs printf '%s\0' ) ;

    for file in "${loadable[@]}" ; do
        requireLib "$file" ;
    done
} ; __ldinit ; unset -f __ldinit ;

# vim: ft=sh


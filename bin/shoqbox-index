#!/usr/bin/perl

=head1 NAME

shoqbox-index - Philips ShoqBox Indexing Utility

=head1 SYNOPSIS

  shoqbox-index <audio-path>

    --verbose    be noisier


=head1 DESCRIPTION

=cut

use strict;
use warnings;

use Carp    qw( croak confess  );
use English qw( -no_match_vars );
use Data::Dumper;
local $Data::Dumper::Terse  = 0;
local $Data::Dumper::Indent = 1;

use DirHandle;
use File::Spec;
use DBI;

my $UNKNOWN = 'Unknown';

### Getopt Boilerplate {{{

my(@All_Parameters) = qw( dry-run );
my(@Required_Parameters) = qw();

use Getopt::Long;
my $getopt = new Getopt::Long::Parser 'config' => [qw/auto_help/];
$getopt->getoptions(\my %opts, 'verbose:+', @All_Parameters)
	or die "failed to parse all options\n";

foreach my $key (@Required_Parameters) {
	die "missing required parameter --$key\n" unless defined $opts{$key};
}

my $dry_run = $opts{'dry-run'};
my $verbose = $opts{'verbose'};

### }}}

my $mp3_folder   = shift @ARGV or die 'missing required argument of MP3 folder';
my $dh           = DirHandle->new($mp3_folder) or die "failed to open MP3 folder $mp3_folder: $!";
my $db_fn        = File::Spec->catfile($mp3_folder, 'MyDB');

my $sequence = 1;
my @enums = qw( artist album genre );
my %enums = map { $ARG => {} } @enums;
my @tracks;


my %song_table_col_map =
(
		'cSongTitle'    => sub { shift->title },
		'iTrackNr'      => sub { int shift->track1 },
		'iTrackLength'  => sub { int shift->total_secs_trunc },
		'iDirId'        => 4,  ## /_system/media/audio
		'iYear'         => sub { shift->year },
		'iBitRate'      => sub { shift->bitrate_kbps },
		'iMediaType'    => 1,  ## Dunno, but everything is set to it.
);

while (my $fn = $dh->read) {
	next unless $fn =~ /\.mp3$/;

	my $full_fn = File::Spec->catfile($mp3_folder, $fn);

	my $mp3 = get_mp3_tag_object($full_fn);
	if (!$mp3) {
		warn "failed to get info for $fn";
		next;
	}

	my(%idn) = map { $ARG => $mp3->$ARG || $UNKNOWN } @enums;
	my(%id)  = map { $ARG => $enums{$ARG}{$idn{$ARG}} ||= $sequence++ } @enums;

	my %data;
	while (my($col,$gather_wtf) = each(%song_table_col_map)) {
		$data{$col} = ref($gather_wtf) ? $gather_wtf->($mp3) : $gather_wtf;
	}

	$data{'iFileSize'} = -s $full_fn;
	$data{'cFileName'} = $fn;
	$data{'iSongId'}   = $sequence++;
	$data{'iAlbumId'}  = $id{'album'};
	$data{'iArtistId'} = $id{'artist'};
	$data{'iGenreId'}  = $id{'genre'};

	push @tracks, \%data;
}

$dh->close;

print Dumper([ \%enums, \@tracks ]) if $verbose;

exit if $dry_run;

my $dbh = DBI->connect("dbi:SQLite2:dbname=$db_fn","","")
	or die $DBI::errstr;

init_tables($dbh);

while (my($name, $id) = each(%{ $enums{'genre'} })) {
	insert_record($dbh, 'genreTable', { 'iGenreId' => $id, 'cGenreName' => $name });
}

while (my($name, $id) = each(%{ $enums{'artist'} })) {
	insert_record($dbh, 'artistTable', { 'iArtistId' => $id, 'cArtistName' => $name });
}

while (my($name, $id) = each(%{ $enums{'album'} })) {
	insert_record($dbh, 'albumTable', { 'iAlbumId' => $id, 'cAlbumTitle' => $name });
}

foreach my $track_hr (@tracks) {
	insert_record($dbh, 'songTable', $track_hr);
}

sub get_mp3_tag_object
{
	my($fn) = @ARG;
	use MP3::Tag;
	return MP3::Tag->new($fn);
}

sub insert_record
{
	my($dbh, $table, $data_hr) = @ARG;

	my %data          = %{ $data_hr };
	my(@cols)         = sort keys %data;
	my(@binds)        = map { $data{$ARG} } @cols;

	my $cols_clause = join(', ', @cols);
	my $phld_clause = join(', ', map { '?' } @cols);

	my $sql = "insert into $table ($cols_clause) values ($phld_clause)";

	$dbh->do($sql, {}, @binds)
		or die "failed to insert $sql " . Dumper(\@binds) . ': ' . $dbh->errstr;
}


sub init_tables
{
	my($dbh) = @ARG;

	foreach my $table (qw( songTable artistTable albumTable genreTable )) {
		$dbh->do("delete from $table") || die "failed to delete $table: " . $dbh->errstr;
	}
}

__END__

=head1 SEE ALSO

=begin CHANGELOG

$Log$

=end CHANGELOG

=head1 AUTHOR

Ron "Quinn" Straight E<lt>quinnfazigu@gmail.comE<gt>

=head1 COPYRIGHT AND LICENSE

Public domain.  Free to use and distribute, appreciate attribution.

=cut

=for REFERENCE

CREATE TABLE songTable (
	iSongId                INTEGER PRIMARY KEY,
	cSongTitle  VARCHAR(100),
	iArtistId          INTEGER,
	iAlbumId          INTEGER,
	iTrackNr                INT8,
	iTrackLength       INT16,
	iNrPlayed         INT16,
	cFileName         VARCHAR(260),
	iDirId                       INTEGER,
	iYear                   INT8,
	iGenreId           INTEGER,
	iBitRate       INTEGER,
	iSampleRate    INTEGER,
	iFileSize      INTEGER,
	iMediaType     INTEGER
);

CREATE TABLE artistTable(
	iArtistId              INTEGER PRIMARY KEY,
	cArtistName        VARCHAR(100)
);

CREATE TABLE albumTable(
	iAlbumId               INTEGER PRIMARY KEY,
	cAlbumTitle        VARCHAR(100)
);

CREATE TABLE genreTable(
	iGenreId               INTEGER PRIMARY KEY,
	cGenreName         VARCHAR(50)
);

sqlite> select * from genreTable;
iGenreId    cGenreName
----------  ----------
2           Hip-Hop   
3           Hip Hop   
4           genre     
5           Indie     
6           No Genre F

sqlite> select * from dirTable;
iDirId      cDirName    iParentDirId
----------  ----------  ------------
1           C:          -559030611  
2           _system     1           
3           media       2           
4           audio       3           

CREATE TABLE playlistTable(
	iPlaylistId INTEGER PRIMARY KEY,
	cPlaylistName       VARCHAR(100),
	cFileName         VARCHAR(260),
	iDirId                       INTEGER
);

CREATE TABLE playsongTable(
	iPlaysongId INTEGER PRIMARY KEY,
	iPlaylistId INTEGER,
	iOrderNr       INTEGER,
	iSongId         INTEGER
);

CREATE TABLE albumTable(
	iAlbumId               INTEGER PRIMARY KEY,
	cAlbumTitle        VARCHAR(100)
);

'SIZE' => 3152323,
	'FILE' => '01 The Farmer of Babbia.mp3',
	'YEAR' => '',
	'OFFSET' => 2048,
	'MS' => '40.3749999999832',
	'STEREO' => 0,
	'file' => '01 The Farmer of Babbia.mp3',
	'ARTIST' => 'Danny Kaye',
	'COMMENT' => 'Golden Records',
	'SECS' => '394.040375',
	'PADDING' => 0,
	'GENRE' => 'Performing Arts',
	'COPYRIGHT' => 0,
	'MM' => 6,
	'TRACKNUM' => '1/6',
	'SS' => 34,
	'MODE' => 3,
	'LAYER' => 3,
	'FREQUENCY' => '22.05',
	'VBR' => 0,
	'TIME' => '06:34',
	'FRAMES' => 15084,
	'ALBUM' => 'Stories from Faraway Places',
	'TITLE' => 'The Farmer of Babbia',
	'BITRATE' => 64,
	'VBR_SCALE' => undef,
	'VERSION' => 2,
	'FRAME_LENGTH' => 208,
	'TRY_HARDER' => 0

sqlite> select * from songTable;
	iSongId = 1
	cSongTitle = 01-Charlie and the Chocolate Factory- Collins Theatre
	iArtistId = 6
	iAlbumId = 6
	iTrackNr = 0
	iTrackLength = 3382
	iNrPlayed = 
	cFileName = 01-Charlie and the Chocolate Factory- Collins Theatre.mp3
	iDirId = 4
	iYear = 
	iGenreId = 6
	iBitRate = 128
	iSampleRate = 
	iFileSize = 54115681
	iMediaType = 1

=cut
## vim: foldmethod=marker





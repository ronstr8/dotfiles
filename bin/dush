#!/usr/bin/env perl

=head1 NAME

dush - Like du(1) but with consistent human-readable size units

=head1 SYNOPSIS

dush [options]

  --units=s     either (B)ytes, (K)ilobytes, (M)egabytes, (G)igabytes or (T)erabytes [M]

  --all         show individual sizes for every file under every dir

  --total       include a grand total size of all sizes reported

  --help        show this message
  --man         show full perldoc
  --verbose     output additional info to stderr

Ron "Quinn" Straight may not have achieved; add further usage notes?

=head1 DESCRIPTION

Ron "Quinn" Straight did not achieve; needs to write a description.

=cut

use strict;
use warnings;
use English qw( -no_match_vars );

use List::Util     qw( min max );
use Number::Format qw( commify );

use String::ShellQuote;

# sudo apt-get install libmath-round-perl libstring-shellquote-perl

### Compact Bootstrapper Told You He Was Hardcore {{{
BEGIN
{
	use Getopt::Long qw( GetOptionsFromArray :config passthrough );
	use Data::Dumper; local $Data::Dumper::Terse = 1; local $Data::Dumper::Indent = 0;

	our %rtparams;

	sub rtparams { shift; die 'rtparams() takes no args.' if @ARG; wantarray ? (( %rtparams )) : \%rtparams }
	sub rtparam { my $self = shift; my $name = shift;
		$rtparams{$name} = shift if @ARG;
		return unless exists $rtparams{$name};
		return $rtparams{$name}; }
	sub verbosity { $rtparams{'verbosity'} || 0 } ## $rtparams{'debug'} ? 11 : ( $rtparams{'verbose'} || 0 ) }
	sub verbose   {   shift->verbosity }
	sub debug     { ( shift->verbosity > 10 ) ? 1 : 0 }

	GetOptionsFromArray(\@ARGV, \%rtparams, qw( db=s debug! trace! verbose+ quiet! ));
	$rtparams{'verbosity'}++    if defined $rtparams{'verbose'};
	$rtparams{'verbosity'} = 11 if defined $rtparams{'debug'};

	my($TRACE, $HOME) = ( $rtparams{'trace'}, $ENV{'HOME'} );

	my(@alts) = grep { -d } map { (glob("$HOME/$_")) }
		qw( checkouts/prod/lib checkouts/cpan/*/lib perl/lib MyRoot/lib/perl/*/ MyRoot/lib/perl/*/auto );
	for (@alts) { unshift(@INC, $_); $TRACE && warn "\t ... \@INC += $_\n" }

	my $shiftr = sub { @_ && $_[0] && ((ref($_[0]) || $_[0]) eq __PACKAGE__) };
	my $whargs = sub { my $dp = shift; my $ap = $_[-1] || '';
		return ( @_, (@_ == 1) ? [] : (), ($ap =~ /$dp/i) ? () : "\U$dp!" ); };
	my $maybem = sub { my($ee) = @_; return if not($TRACE) or not($ee);
		$ee =~ s/^(Can't locate \S+ in \S+).+$/$1/ms; warn "$ee\n"; };

	my(%optsub) = (
		'whinger'   => 'use Devel::Whinger; my $w = Devel::Whinger->new( "whinging_for" => __PACKAGE__ ); sub { $w->whingef(@_); };',
		'colorizer' => '', ## 'use Term::ANSIColor qw(); sub { Term::ANSIColor::color(shift) };',
	);
	for (( keys(%optsub) )) { $optsub{$ARG} = eval $optsub{$ARG}; $maybem->("$EVAL_ERROR"); };

	my(%inj);

	$inj{'color'} = sub { shift(@_) if $shiftr->(@_);
		return $optsub{'colorizer'} ? $optsub{'colorizer'}->(@_) : ''; };

	$inj{'whingef'} = sub { shift(@_) if $shiftr->(@_);
		return $optsub{'whinger'}->(@_) if $optsub{'whinger'};
		my($f, $ar, $w) = @_;
		my(@fargs) = map { my $ae = $_; my $rt = ref($ae) || '';
			if (not($rt)) { $ae }
			elsif ( $rt eq 'HASH' ) { no warnings; my(@kk) = keys(%{ $rt });
				eval { (@kk == 1) && ($rt->{$kk[0]} =~ /^[a-z]+$/) && Dumper(\$rt->{$kk[0]}) } || Dumper($rt);
			}
			elsif ( $rt eq 'ARRAY' ) { no warnings; my(@vv) = (@{ $ae });
				eval { (@vv == 2) && ($vv[0] =~ /^[a-z]+$/) && Dumper(\$vv[1]) } || Dumper($ae);
			}
			else { Dumper($ae); }
		} @{ $ar };
		my $m = ( sprintf($f, @fargs) // '' ) . "\n";
		( $w && ( $w =~ /^DIE/i ) ) ? die($m) : warn($m); };

	$inj{'dirgef'} = sub { shift(@_) if $shiftr->(@_);
		eval q{ print STDERR $inj{'color'}->('bold red'); };
		$inj{'whingef'}->(( $whargs->('die', @_) ));
	};

	$inj{'debugf'} = sub { shift(@_) if $shiftr->(@_);
		eval q{ print STDERR $inj{'color'}->('yellow'); STDERR->flush; };
		eval  { $inj{'whingef'}->(( $whargs->('debug', @_) )) };
		eval q{ print STDERR $inj{'color'}->('reset'); STDERR->flush; };
	};

	$inj{'tracef'} = sub { return unless $TRACE; shift(@_) if $shiftr->(@_);
		eval q{ print STDERR $inj{'color'}->('red'); STDERR->flush; };
		eval  { $inj{'whingef'}->(( $whargs->('notify', @_) )) };
		eval q{ print STDERR $inj{'color'}->('reset'); STDERR->flush; };
	};


	{ no strict 'refs'; *{'main' . '::' . $_} = $inj{$_} for keys %inj; };
}
### }}}

### Options and Run-Time Parameters {{{
{

## According to the --opt:s documentation in Getopt::Long, parameters that
## accept an optional value which are given on the command line but do not
## include a value will be assigned EMPTY STRING or ZERO according to their
## underlying types.

	my $rtparams_hr = __PACKAGE__->rtparams();
	my %getopt = (
#		'single-string=s' => { 'default' => 'GET' },
#		'multi-string=s@' => { 'default' => +[] },

		'units=s'         => { 'default' => 'M' },
#		'summarize!'      => {}, ## show sizes of contents of each argument given-- do not descend dirs
		'all!'            => {},
		'total!'          => {},
		'dry-run|n!'      => {},

		'verbose+'        => { 'default' =>  0 },
		'debug!'          => { 'default' =>  0 },

		'man!'            => {},
	);
	$getopt{$ARG} = {} for qw(  );


	use Getopt::Long; use Pod::Usage;
	my $getopt = new Getopt::Long::Parser 'config' => [qw/auto_help/];
	   $getopt->configure( qw/auto_help/ );
	   $getopt->getoptions($rtparams_hr, keys %getopt) or die "Failed to parse all options!\n";
	Pod::Usage::pod2usage({-verbose => 2}) if $rtparams_hr->{'man'};

	while (my($opt, $conf_hr) = each(%getopt)) { next unless $conf_hr;
		$opt =~ s/^(--)?([a-z_0-9-]+)(\W.*)?$/$2/gi;
		my $val = $rtparams_hr->{$opt} //= $conf_hr->{'default'} // '';
		next if $val ne ''; next unless my $rmsg = $conf_hr->{'required'};
		die sprintf("Missing parameter --%s: %s\n", $opt, $rmsg || 'Required!');
	}
}
### }}}

my $self = __PACKAGE__;

## $self->whingef('## NOTIFY! \%%rtparamsRaw=%s; \%%rtparamsDump=%s;', [ \%main::rtparams, { 'dump' => \%main::rtparams } ], 'NOTIFY!');
## $self->whingef('--verbose: \%%rtparams=%s; ## Shown only w/some verbosity, implicit with --dry-run.', [ { 'dump' => \%main::rtparams } ]);
## $self->debugf( '--debug: ## Shown only w/high verbosity.', [\%main::rtparams]);
## $self->tracef( '--trace: ## Shown only w/tracing enabled.');
## $self->dirgef( '$self->dirgef(...) ## This dies.  Should be no output after.', [ \%main::rtparams ]);
## $self->whingef('## NOTIFY! Oh fuck we should be dead.', 'NOTIFY!');

my $kilobyte = 1024;
my $unitPref = uc substr($self->rtparam('units'), 0, 1);

my(@units) = qw( B KB MB GB TB );
my(%units) = map { my $idx = $ARG; my $unit = $units[$idx];
	uc(substr($unit, 0, 1)) => $idx
} ( 0 .. $#units );


$self->dirgef('Unknown --units value «%s»; valid choices are %s.', [ $unitPref, { 'dump' => \@units } ])
	unless exists $units{$unitPref};

my $unitIdx    = $units{$unitPref};
my $unitDiv    = $kilobyte ** $unitIdx;
my $unitSuffix = $units[$unitIdx];

$self->tracef('$unitDiv = %s; $unitSuffix = %s; \%%units = %s;', [ $unitDiv, $unitSuffix, \%units ]);

my $maxByteLen = -1;
my $maxSizeLen = -1;
my $minBytes = undef;

my $fileList = shell_quote(@ARGV);
my @cmdArgs  = qw( -b );  ## byte units, and forced -s
#push @cmdArgs, '-S' if 1; ## descend into subdirectories for their individual sizes
push @cmdArgs, '-c' if $self->rtparam('total'); ## Display a grand total.

if ( $self->rtparam('all') ) {
	push @cmdArgs, '-a'; ## Show files in addition to directories.
}
else {
	push @cmdArgs, '-s'; ## only a total for each argument
}

my $cmdLine  = qq{ du @cmdArgs $fileList };
$self->debugf('$ %s', [ $cmdLine ]);

my(@rawInput) = qx{ $cmdLine }; ##| xargs };
my(@records);

foreach my $rr (@rawInput) { $rr =~ s/^\s+//; $rr =~ s/\s+$//;
	my($bytes, $fn) = split(/\s+/, $rr, 2);

	$minBytes   = $bytes && min($minBytes //= $bytes, $bytes);
	$maxByteLen = max($maxByteLen, length($bytes));

	push @records, [ $fn, $bytes, undef ];
}

my $precision = (($unitDiv != 1) && defined($minBytes) && ($minBytes < $unitDiv)) && ($unitIdx + 1);
my $maxSizeStrLen = 0;

$self->tracef('$minBytes = %s; $precision = %s; $maxSizeStrLen = %s;', [ $minBytes, $precision, $maxSizeStrLen ]);

for my $rr (@records) {
	my $sizeStr = commify($rr->[1] / $unitDiv,
		'precision' => $precision) . $unitSuffix;
	$maxSizeStrLen = max($maxSizeStrLen, length($sizeStr));

	$rr->[-1] = $sizeStr;
}

foreach my $record (@records) {
	my($fn, $bytes, $sizeStr) = @{ $record };
	printf("%*d\t%*s\t%s\n", $maxByteLen, $bytes, $maxSizeStrLen, $sizeStr, $fn);
}

__END__


__END__

=head1 BUGS

=over

=item Ron "Quinn" Straight achieved with distinction; no bugs!

=back

=head1 SEE ALSO

Ron "Quinn" Straight may not have achieved; point to related topics?


=head1 AUTHOR

Ron "Quinn" Straight E<lt>quinnfazigu@gmail.comE<gt>

=head1 COPYRIGHT AND LICENSE

Copyright (C) 2014 (Freelance Hacker)

=cut

## vim: foldmethod=marker


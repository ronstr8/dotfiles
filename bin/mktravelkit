#!/bin/bash

export SHRC_HOME_REL=".bash" ; 
export SHRC_RUN_REL="${SHRC_HOME_REL}/rc" ;
export SHRC_RCD_REL="${SHRC_HOME_REL}/rc.d" ;

export SHRC_HOME="$HOME/$SHRC_HOME_REL" ;
export SHRC_RUN="$HOME/${SHRC_RUN_REL}" ;
export SHRC_RCD="$HOME/${SHRC_RCD_REL}" ;
export SHRC_LIB="${SHRC_RCD}/00-stdlib.bash" ;
export SHRC_FUN="${SHRC_RCD}/10-custom.bash" ;

unset -f __initBriefcase ; function __initBriefcase() {
    local hookedSuffix=" # Load settings from briefcase bashrc at ${SHRC_RC}." ;

    mkdir -p "$SHRC_HOME" || { echo "Failed to create $SHRC_HOME." ; return ; }
    mkdir -p "$SHRC_RCD"  || { echo "Failed to create $SHRC_RCD."  ; return ; }

    if ! grep "$hookedSuffix\$" "$HOME/.bashrc" &>/dev/null ; then
        cat <<EOT > "$HOME/.bashrc" ;

[ -x "\$HOME/$SHRC_RUN_REL" ] && . "\$HOME/$SHRC_RUN_REL" ; $hookedSuffix

EOT
    fi

    cat <<EOT > $SHRC_RUN ;

unset -f __runParts ; function __runParts() {
    local xFn ;

    for xFn in \$HOME/${SHRC_RCD_REL}/*.bash ; do
        if [ -x \$xFn ] ; then . \$xFn ;
    fi ; done
} ;
__runParts ; unset -f __runParts ;

EOT

    chmod 0755 "$SHRC_RUN" ;

} ; __initBriefcase ; unset -f __initBriefcase ;

unset -f __fileMunge ; function __fileMunge() {
    local xFn="${1:?Need name of file to munge}" ;
    [ ! "$SHRC_CLOBBER" -a -f "$xFn" ] && echo "$xFn exists." || sed 's/^\s\{8\}//;' > "$xFn" ;
} ;

__fileMunge "$SHRC_LIB" <<'EOT' ; chmod 0755 "$SHRC_LIB" ;

unset -f __fileMunge ; function __fileMunge() {
    local xFn="${1:?Need name of file to munge}" ;
    [ ! "$SHRC_CLOBBER" -a -f "$xFn" ] && echo "$xFn exists." || sed 's/^\s\{8\}//;' > "$xFn" ;
} ;

unset -f __canonicalPath ; function __canonicalPath() {
    ( 
        local dir="${1:?Need a path or file name}" ;

        cd -P -- "$( dirname -- "$1" )" &&
            printf '%s\n' "$( pwd -P )/$( basename -- "$1" )" ;
    ) ;
} ;

unset -f __bashPrompt ; function __bashPrompt() {
    local fg="${1:-$((RANDOM%15+1))}" ;
    fg=$(( fg % 256 )) ;
    export PS1='\n\[\e[38;5;'$fg'm\]\D{%F %T} :: \w\n \[\e[38;5;'$fg'm\]\u@\h\$\[\e[0m\] ' ;
} ;

unset -f __machinePrompt ; function __machinePrompt() {
    if [[ ! $TERM =~ xterm\|screen\|color ]] ; then
        return ;
    fi
    local machineSeed="0$( hostname | tr -d '0-9' | sum | tr -s '[:alpha:]' '+' | tr -cd '0-9+' )" ;
    __bashPrompt $( echo "((($machineSeed) % 214)+17)" | bc ) ;
} ;

unset -f __pathMunge ; function __pathMunge() {
    local pathVar="${1:?Need variable name for path to munge}" ; shift ;
    local pathVal="${!pathVar}" pathElm ;
    for pathElm in $* ; do pathElm="${pathElm%%/}" ; # mkdir -p "${pathElm}" ;
        if [[ ! $pathVal =~ \(^\|:\)${pathElm}/?\(:\|$\) ]] ; then
            pathVal="${pathVal}:${pathElm}" ;
        fi
    done
    [ "${pathVal}" = "${!pathVar}" ] || eval "${pathVar}='${pathVal}'" ;
} ;

unset -f __findJavaHome ; function __findJavaHome() {
    [ -d "$JAVA_HOME" ] && return ;
    local javaExe=$( which java ) ; [ -x "$javaExe" ] || return ;
#   local javaDir=$( dirname $( dirname $( readlink -f "$javaExe" ) ) ) ;
    local javaDir=$( dirname $( dirname "$javaExe" ) ) ;
    [ -d "$javaDir" ] && export JAVA_HOME="$javaDir" ;
} ;

EOT

. $SHRC_LIB ;

# echo '[ -f "$HOME/.bashrc" ] && source "$HOME/.bashrc" ;' > ~/.bash_profile

__fileMunge "$SHRC_FUN" <<'EOT' ; chmod 0755 "$SHRC_FUN" ;

shopt -s histreedit histappend checkwinsize ;

set -o ignoreeof ;             # No logout w/^D.
stty stop undef >& /dev/null ; # Is "flow control" obsolete?  Yes.

export EDITOR='vim' ;

export HISTTIMEFORMAT="[%FT%T%z] " ;
export HISTSIZE=4096

export GIT_PAGER=cat

__pathMunge 'PATH' "$HOME/bin" "$HOME/.local/bin" /usr/local/bin /sbin /usr/sbin /usr/local/sbin ;

function __addGnuPaths() {
    local gnuDir subDir ;

    for gnuDir in xpg4 sfw ; do
        for subDir in "/usr/$gnuDir/bin" "/usr/$gnuDir/sbin" ; do
            [ -d "$subDir" ] && __pathMunge 'PATH' "$subDir" ;
        done
    done
} ; __addGnuPaths ; unset -f __addGnuPaths ;

__findJavaHome  ; unset -f __findJavaHome ;
__machinePrompt ; # unset -f __machinePrompt ;

alias ll='ls -lF' ; # --color is not universal.
alias cp='cp -i' ; # Force confirmation of cp, rm, mv.
alias rm='rm -i' ;
alias mv='mv -i' ;

# alias colortest='(for i in {0..255};do tput setab $i;tput setaf $(((i/3)%8));printf "%5d  `tput op`" $i;[ $(((i+1)%8)) -eq 0 ]&&echo "$(tput setab 0)$(tput setaf 7)";done)' ;
alias urldecode="perl -p -e 's/%([0-9A-F]{2})/chr(hex(\$1))/gie;'" ;

EOT

SHRC_CLOBBER='' __fileMunge "$HOME/.vimrc" <<'EOT' ;

set nocompatible

set ruler

set incsearch
set hlsearch
set smartcase

syntax on
set background=dark

set autoindent
set expandtab
set tabstop=4
set shiftwidth=4

set t_Co=256
set t_ZH="^[[3m"
set t_ZR="^[[23m"

colorscheme slate

if has("conceal") | set conceallevel=0 | endif | " JSON edits w/conceal give me a headache.

noremap <C-Left>  :bprev<CR> " Ctrl-Left goes to previous buffer.
noremap <C-Right> :bnext<CR> " Ctrl-Right goes to next buffer.

set statusline=%<%f%h%m%r%=Col\ %c\ Line\ %l/%L\ %P

" Copy VIM selection to both X11 clipboard and selection.
" set clipboard=unnamedplus

EOT

SHRC_CLOBBER='' __fileMunge "$HOME/.screenrc" <<'EOT' ;

# @see http://dotfiles.org/.screenrc
# @see http://www.softpanorama.org/Utilities/Screen/tips.shtml

startup_message off
msgwait         1

defwrap         on
defflow         off
defscrollback   16384

vbell   off
nethack on
# zombie  onerror

ignorecase on

# @see https://bbs.archlinux.org/viewtopic.php?id=55618&p=2
hardstatus on
hardstatus alwayslastline
hardstatus string '%{= w}%-w%{+b r}%n*%t%{-b r}%{w}%+w %= %{+d c}[%D %Y-%m-%d %0c]'

bindkey "^[[1;3D" prev # Alt+Left  to previous window.
bindkey "^[[1;3C" next # Alt+Right to next window.

defbce  "on"
defutf8 "on"

attrcolor b ".I"

termcapinfo xterm* 'cc:'
termcapinfo xterm* 'Sb@:Sf@:'
termcapinfo xterm* 'bc@:bs@'
termcapinfo xterm* 'OL=10000'
termcapinfo xterm* 'ti@:te@'
termcapinfo xterm* 'Co#256:AB=\E[48;5;%dm:AF=\E[38;5;%dm'

EOT

SHRC_CLOBBER='' __fileMunge "$HOME/.inputrc" <<'EOT' ;

"\e[1~": beginning-of-line
"\e[4~": end-of-line
"\e[3~": delete-char

$if Bash
    ## Mappings for Ctrl-left-arrow and Ctrl-right-arrow for word moving.
    ## These conflict with vim mappings, so only implement them if Bash.
    ## @see http://askubuntu.com/questions/53556/strange-characters-appearing-when-i-use-the-ctrl-and-arrow-keys-to-navigate

    "\e[1;5C": forward-word
    "\e[5C":   forward-word
    "\e\e[C":  forward-word

    "\e[1;5D": backward-word
    "\e[5D":   backward-word
    "\e\e[D":  backward-word
$endif

set horizontal-scroll-mode off

EOT

# vim: tabstop=4 shiftwidth=4 filetype=sh


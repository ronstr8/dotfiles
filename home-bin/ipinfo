#!/bin/bash
## ipinfo [ipaddr...]
##
##      Get IP address info from ipinfo.io.  Address defaults to current.
##
## -- 
## Ronald E. Straight <straightre@gmail.com>

## @see http://ipinfo.io/developers/full-ip-details

# dig +short myip.opendns.com @resolver1.opendns.com
# curl https://4.ifcfg.me/cpe-104-228-128-159.buffalo.res.rr.com/json
# curl http://checkip.amazonaws.com/
# dig +short . @ifcfg.me
## @see http://unix.stackexchange.com/questions/22615/how-can-i-get-my-external-ip-address-in-a-shell-script

## Bash script boilerplate variables.

declare -r    SCRIPT_NAME=$( basename "$0" ) ;

declare -r -i TRUE=1 FALSE=0 ;
declare -r -i RV_SUCCESS=0 RV_FAILURE=1  RV_NOOP=$RV_SUCCESS ;

declare -r    DEFAULT_SHORT_OPTS='hvn' DEFAULT_LONG_OPTS='help,verbose,dry-run,debug,trace' ;

declare    -i VERBOSITY=0 DRY_RUN=$FALSE VERBOSE=$FALSE DEBUG=$FALSE TRACE=$FALSE ;
declare       WHINGEE='' ;
declare       GFX_EM="$( tput setaf 1 2>/dev/null )" GFX_RS="$( tput sgr0 2 2>/dev/null )" ;

## Boilerplate functions.

function __isTrue()  { [[ $# -gt 0 ]] || return $RV_FAILURE ; declare value=$1 ; (( value > value/2 )) ; }
function __isEmpty() { [[ -z "$1" ]] ; } ;

function __isInt()   {
    declare str=${1?Missing required argument of string to be checked.} ;
    declare alt=${2:-NaN} ;

    ## @TODO(ronstra): Use `expr' and check for $? of 2?

    if [[ "$1" =~ ^-?[0-9]+$ ]] ; then
        echo $str ; return $RV_SUCCESS ;
    else
        echo $alt ; return $RV_FAILURE ;
    fi
} ;

function __Whinge()  { declare -i rv ; rv=$( __isInt "$1" ) && shift ; echo "[$( date +%Y-%m-%dT%H:%M:%S )]${WHINGEE:- }$@" 1>&2 ; return $rv ; }
function __Croak()   { __Whinge "$@" ; exit ; } ;

## Application variables.

declare -i HAS_DRY_RUN=$FALSE ;
declare    APP_OPTIONS='' ;

declare -r IPADDR_RE='^[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+$' ;
declare -r CURL_EXE='curl --silent' ;
declare -r IPINFO_URL_FMT='http://ipinfo.io/%s' ;
declare -r ARIN_IP_URL_FMT='http://whois.arin.net/rest/ip/%s' ;

## Main logic.

## @see https://www.arin.net/resources/whoisrws/whois_api.html#whoisrws
unset -f __Arin ; function __Arin() {
    declare ipaddr=${1?Missing required argument of address for ARIN REST query.} ;
    declare url=$( printf "$ARIN_IP_URL_FMT" "$ipaddr" ) ;

    (( VERBOSE )) && __Whinge "# <$ipaddr> $CURL_EXE -H 'Accept: text/plain' $url ..." ;
    $CURL_EXE -H 'Accept: text/plain' "$url" | grep -v '^#' | grep -v '^$' ;
} ;

unset -f __Main ; function __Main() {
    declare -a targets=( $@ ) ;
    declare    host ipaddr url doIpcalc cidr ;
    declare    hasIpcalc='' ; # $( type ipcalc 2> /dev/null ) ; # Too much noise/signal.

    if (( ! $# )) ; then
        targets=( '' ) ;
    fi

    for host in "${targets[@]}" ; do
        if [[ ! "$host" ]] ; then
            ipaddr='' ;
        elif [[ $host =~ $IPADDR_RE ]] ; then
            ipaddr=$host ;
        else
            ipaddr=$( host $host | awk '{ print $NF }' 2>/dev/null ) ;
        fi

        url=$( printf "$IPINFO_URL_FMT" "$ipaddr" ) ;

        (( VERBOSE )) && __Whinge "# <$ipaddr> $CURL_EXE $url ..." ;
        $CURL_EXE "$url" ; echo ;

        if [[ ! "$ipaddr" ]] ; then
            ipaddr=$( $CURL_EXE "$url" | awk -F\" '/"ip"/ { print $4 }' ) ;
        fi

        if [[ ! "$ipaddr" ]] ; then
            __Whinge "# Failed to parse IP address." ;
            continue ;
        fi

        doIpcalc=''

        echo ;
        __Arin "$ipaddr" && doIpcalc="$hasIpcalc" ;

        if [[ "$doIpcalc" ]] ; then
            cidr=$( __Arin "$ipaddr" 2>/dev/null | awk '/CIDR/ { print $2 }' ) ;
            echo ; 
            __Whinge "# ipcalc --nocolor $cidr" ...;
            echo ;
            ipcalc --nocolor $cidr ;
        fi
    done
} ;

## Runtime.

__Main "$@" ; unset -f __Main ;



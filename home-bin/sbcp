#!/usr/bin/perl

=head1 NAME

sbcp - Philips ShoqBox File Copy Utility

=head1 SYNOPSIS

  sbcp <file>.mp3 <dest-path>

    --verbose    be noisier

	--db=fn      full path to C<MyDB> on device (e.g. /media/FLASH/_system/media/audio/MyDB)


=head1 DESCRIPTION

=cut

use strict;
use warnings;

use Carp    qw( croak confess  );
use English qw( -no_match_vars );
use Data::Dumper;
local $Data::Dumper::Terse  = 0;
local $Data::Dumper::Indent = 1;

use File::Copy;
use File::Spec;
use MP3::Info;
use DBI;

our($VERSION) = ( '$Revision$' =~ /^[\$]Revision: ([0-9.]+) [\$]$/ );

### Getopt Boilerplate {{{

my(@All_Parameters) = qw(
	db=s
);
my(@Required_Parameters) = qw( db );

use Getopt::Long;
my $getopt = new Getopt::Long::Parser 'config' => [qw/auto_help/];
$getopt->getoptions(\my %opts, 'verbose:+', @All_Parameters)
	or die "failed to parse all options\n";

foreach my $key (@Required_Parameters) {
	die "missing required parameter --$key\n" unless defined $opts{$key};
}

### }}}

my $mp3_fn       = shift @ARGV or die 'missing required argument of MP3 to copy';
my $mp3_dst      = shift @ARGV or die 'missing destination path of MP3';
my @mp3_path     = File::Spec->splitpath($mp3_fn);
my $mp3_basename = pop @mp3_path;

copy($mp3_fn, "$mp3_dst/$mp3_basename")
	or die "failed to copy file: $!";

my $mp3 = MP3::Info->new($mp3_fn);

my $dbfile = $opts{'db'};
my $dbh    = DBI->connect("dbi:SQLite2:dbname=$dbfile","","")
	or die $DBI::errstr;

my %song_table_col_map =
(
#		'iSongId'       => '?',
		'cSongTitle'    => sub { shift->title },
#		'iArtistId'     => '?',
#		'iAlbumId'      => '?',
		'iTrackLength'  => sub { int shift->secs },
		'cFileName'     => $mp3_basename,
		'iDirId'        => 4,  ## /_system/media/audio
		'iYear'         => sub { shift->year },
		'iGenreId'      => 6,  ## No Genre Found
		'iBitRate'      => sub { shift->bitrate },
		'iFileSize'     => sub { shift->size },
		'iMediaType'    => 1,  ## Dunno, but everything is set to it.
);

my $album     = $mp3->album;
my($album_id) = $dbh->selectrow_array('select iAlbumId from albumTable where cAlbumTitle=?', {}, $album);
if (!$album_id) {
	($album_id) = $dbh->selectrow_array('select max(iAlbumId)+1 from albumTable');
	$dbh->do('insert into albumTable (iAlbumId,cAlbumTitle) values (?,?)', {}, $album_id, $album);
}

my $artist = $mp3->artist;
my($artist_id) = $dbh->selectrow_array('select iArtistId from artistTable where cArtistName=?', {}, $artist);
if (!$artist_id) {
	($artist_id) = $dbh->selectrow_array('select max(iArtistId)+1 from artistTable');
	$dbh->do('insert into artistTable (iArtistId,cArtistName) values (?,?)', {}, $artist_id, $artist);
}


my %data;
while (my($col,$gather_wtf) = each(%song_table_col_map)) {
	$data{$col} = ref($gather_wtf) ? $gather_wtf->($mp3) : $gather_wtf;
}
$data{'iAlbumId'}  = $album_id;
$data{'iArtistId'} = $artist_id;

my $song = $mp3->title;
my($song_id) = $dbh->selectrow_array(
	'select iSongId from songTable where cSongTitle=? and iAlbumId=? and iArtistId=? and cFileName=?', {},
	$song, $album_id, $artist_id, $mp3_basename);

my $is_new_entry = 0;
if (!$song_id) {
	($song_id) = $dbh->selectrow_array('select max(iSongId)+1 from songTable');
	$is_new_entry = 1;
}

$data{'iSongId'} = $song_id;

my(@cols)         = sort keys %data;
my(@binds)        = map { $data{$ARG} } @cols;
my(@placeholders) = map { '?' } @cols;

my $sql = '';

if ($is_new_entry) {
	$sql = 'insert into songTable (' . join(',', @cols) . ') values (' . join(', ', @placeholders) . ')';
}
else {
	die 'song already exists; skipping insert' unless $is_new_entry;
}

$dbh->do($sql, {}, @binds) if $sql;

print Dumper(\%data);

__END__

=head1 SEE ALSO

=begin CHANGELOG

$Log$

=end CHANGELOG

=head1 AUTHOR

Ron "Quinn" Straight E<lt>quinnfazigu@gmail.comE<gt>

=head1 COPYRIGHT AND LICENSE

Public domain.  Free to use and distribute, appreciate attribution.

=cut

=for REFERENCE

CREATE TABLE songTable (
	iSongId                INTEGER PRIMARY KEY,
	cSongTitle  VARCHAR(100),
	iArtistId          INTEGER,
	iAlbumId          INTEGER,
	iTrackNr                INT8,
	iTrackLength       INT16,
	iNrPlayed         INT16,
	cFileName         VARCHAR(260),
	iDirId                       INTEGER,
	iYear                   INT8,
	iGenreId           INTEGER,
	iBitRate       INTEGER,
	iSampleRate    INTEGER,
	iFileSize      INTEGER,
	iMediaType     INTEGER
);

CREATE TABLE artistTable(
	iArtistId              INTEGER PRIMARY KEY,
	cArtistName        VARCHAR(100)
);

CREATE TABLE albumTable(
	iAlbumId               INTEGER PRIMARY KEY,
	cAlbumTitle        VARCHAR(100)
);

CREATE TABLE genreTable(
	iGenreId               INTEGER PRIMARY KEY,
	cGenreName         VARCHAR(50)
);

sqlite> select * from genreTable;
iGenreId    cGenreName
----------  ----------
2           Hip-Hop   
3           Hip Hop   
4           genre     
5           Indie     
6           No Genre F

sqlite> select * from dirTable;
iDirId      cDirName    iParentDirId
----------  ----------  ------------
1           C:          -559030611  
2           _system     1           
3           media       2           
4           audio       3           

CREATE TABLE playlistTable(
	iPlaylistId INTEGER PRIMARY KEY,
	cPlaylistName       VARCHAR(100),
	cFileName         VARCHAR(260),
	iDirId                       INTEGER
);

CREATE TABLE playsongTable(
	iPlaysongId INTEGER PRIMARY KEY,
	iPlaylistId INTEGER,
	iOrderNr       INTEGER,
	iSongId         INTEGER
);

CREATE TABLE albumTable(
	iAlbumId               INTEGER PRIMARY KEY,
	cAlbumTitle        VARCHAR(100)
);

'SIZE' => 3152323,
	'FILE' => '01 The Farmer of Babbia.mp3',
	'YEAR' => '',
	'OFFSET' => 2048,
	'MS' => '40.3749999999832',
	'STEREO' => 0,
	'file' => '01 The Farmer of Babbia.mp3',
	'ARTIST' => 'Danny Kaye',
	'COMMENT' => 'Golden Records',
	'SECS' => '394.040375',
	'PADDING' => 0,
	'GENRE' => 'Performing Arts',
	'COPYRIGHT' => 0,
	'MM' => 6,
	'TRACKNUM' => '1/6',
	'SS' => 34,
	'MODE' => 3,
	'LAYER' => 3,
	'FREQUENCY' => '22.05',
	'VBR' => 0,
	'TIME' => '06:34',
	'FRAMES' => 15084,
	'ALBUM' => 'Stories from Faraway Places',
	'TITLE' => 'The Farmer of Babbia',
	'BITRATE' => 64,
	'VBR_SCALE' => undef,
	'VERSION' => 2,
	'FRAME_LENGTH' => 208,
	'TRY_HARDER' => 0

sqlite> select * from songTable;
	iSongId = 1
	cSongTitle = 01-Charlie and the Chocolate Factory- Collins Theatre
	iArtistId = 6
	iAlbumId = 6
	iTrackNr = 0
	iTrackLength = 3382
	iNrPlayed = 
	cFileName = 01-Charlie and the Chocolate Factory- Collins Theatre.mp3
	iDirId = 4
	iYear = 
	iGenreId = 6
	iBitRate = 128
	iSampleRate = 
	iFileSize = 54115681
	iMediaType = 1

=cut
## vim: foldmethod=marker




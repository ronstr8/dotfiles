#!/bin/bash

function __configureXtermArgs() {
    declare xtermArgs=""

    ## -aw
    ## Auto-wraparound should be allowed.
    ## Allows the cursor to automatically wrap to the beginning of the next
    ## line when it at the rightmost position and text is output.

    xtermArgs="${xtermArgs} -aw"

    ## -l
    ## Turn logging on.
    ## Normally logging is not supported, due to security concerns.  Some
    ## versions of xterm may have logging enabled.  The logfile is written
    ## to the directory from which xterm is invoked.

#   xtermArgs="${xtermArgs} -l"

    ## -lc
    ## Turn on support of various encodings according to LC_ALL, LC_CTYPE, or LANG.
    ## Achieved by turning on UTF-8 mode and invoking luit for conversion
    ## between locale encodings and UTF-8.  (luit is not invoked in UTF-8
    ## locales.)  Corresponds to the "locale" resource.

    xtermArgs="${xtermArgs} -lc"

    ## +nul
    ## Enables the display of underlining.

#   xtermArgs="${xtermArgs} +nul"

    ## -pc
    ## Enables the PC-style use of bold colors (see boldColors resource).

#   xtermArgs="${xtermArgs} -pc"

    ## +rvc
    ## Enables the display of characters with reverse attribute as color.

#   xtermArgs="${xtermArgs} +rvc"

    ## -rw
    ## Reverse-wraparound should be allowed.
    ## This allows the cursor to back up from the leftmost column of one line to the
    ## rightmost column of the previous line.  This is very useful for editing long
    ## shell command  lines  and  is  encouraged.  This option can be turned on and
    ## off from the "VT Options" menu.

#   xtermArgs="${xtermArgs} -rw"

    ## +sb
    ## Scrollbar should not be displayed.

    xtermArgs="${xtermArgs} +sb"

    ## +sf
    ## Standard escape codes should be generated for function keys.

#   xtermArgs="${xtermArgs} +sf"

    ## -si
    ## Window output should not reposition screen to bottom of scroll region.
    ## This option can be turned on and off from the "VT Options" menu.

    xtermArgs="${xtermArgs} -si"

    ## -sk
    ## Pressing a key in scrollback should reposition to bottom of scroll region.
    ## This option can be turned on and off from the "VT Options" menu.

    xtermArgs="${xtermArgs} -sk"

    ## -sl number
    ## Lines to save that have been scrolled off the top of the screen.
    ## Corresponds to "saveLines" resource.  Default "64".

    xtermArgs="${xtermArgs} -sl 65536"

    ## +sp
    ## Standard escape codes should be generated for keypad and function keys.

    xtermArgs="${xtermArgs} +sp"

    ## +t
    ## Xterm should start in VT102 mode.

#   xtermArgs="${xtermArgs} +t"

    ## -tb 
    ## Corresponds to the "toolBar" resource, displaying tool/menu bar
    ## companion to "Main Options" popup menu.
    ## NOTE :: This turns on Tektronix mode.

#   xtermArgs="${xtermArgs} -tb"

    ## -ti term_id
    ## Specify name used by xterm to select the correct response to
    ## terminal ID queries.  Also specifies emulation level, used
    ## to determine type of response to a DA control sequence.
    ## Valid values: vt52, vt100, vt101, vt102, and vt220 ("vt" optional).
    ## Default is "vt100".  Corresponds to "decTerminalID" resource.

#   xtermArgs="${xtermArgs} -ti vt102"

    ## -tm string
    ## Specifies series of terminal setting keywords followed by the
    ## characters that should be bound to those functions, similar
    ## to the stty program.  The keywords and their values are
    ## described in detail in the "ttyModes" resource.

#   xtermArgs="${xtermArgs} -tm ..."

    ## -tn name
    ## Specifies value of TERM environment variable.  Corresponds
    ## to "termName" resource.  Terminal type must exist in the
    ## termcap/terminfo and should have li# and co# entries.  If the
    ## terminal type is not found, xterm uses the built-in list of
    ## "xterm", "vt102", etc. 

#   xtermArgs="${xtermArgs} -tn vt102"

    ## -uc
    ## Makes cursor underlined instead of boxed.
    ## XXX Hard to see an underline-cursor in vim and other apps.

#   xtermArgs="${xtermArgs} -uc"

    ## +ulit
    ## Display characters w/underline attribute in italics.
    ## Corresponds to "italicULMode" resource.

    xtermArgs="${xtermArgs} +ulit"

    ## -wf
    ## Wait for window to be mapped the first time before starting the
    ## subprocess so that initial terminal size settings and environment
    ## variables are correct.  It is the application's responsibility
    ## to catch subsequent terminal size changes.

    xtermArgs="${xtermArgs} -wf"

    ## -xrm resourcestring
    ## Specifies arbitrary resource strings and values.  Especially useful
    ## for setting resources that do not have command line options.
    ## Understands all core X Toolkit resource names and classes.  Application
    ## specific resources (e.g., "XTerm.NAME") follow.

#   xtermArgs="${xtermArgs} -xrm 'keyboardType: tcap'"
#   xtermArgs="${xtermArgs} -xrm 'backarrowKeyIsErase: false'"
    xtermArgs="${xtermArgs} -xrm 'appkeypadDefault: false'"
#   xtermArgs="${xtermArgs} -xrm 'curses: true'"
    xtermArgs="${xtermArgs} -xrm 'cutNewline: false'"
    xtermArgs="${xtermArgs} -xrm 'eightBitControl: true'"
    xtermArgs="${xtermArgs} -xrm 'eightBitInput: true'"
    xtermArgs="${xtermArgs} -xrm 'modifyCursorKeys: 0'"
    xtermArgs="${xtermArgs} -xrm 'numLock: true'"
#   xtermArgs="${xtermArgs} -xrm 'openIm: true'"
#   xtermArgs="${xtermArgs} -xrm 'on5Clicks: all'" ## word, line, group, page, all, regex, none
#   xtermArgs="${xtermArgs} -xrm 'trimSelection: true'"
    xtermArgs="${xtermArgs} -xrm 'vt100Graphics: true'"
#   xtermArgs="${xtermArgs} -xrm 'set-appkeypad(off)'"

    echo $xtermArgs ;
}

function __main() {
#   eval $( ssh-agent )
#   ssh-add
    eval $( keychain --eval --quiet ) ;

    declare -i SKIP_ALL_CUSTOM_ARGS=0 ;

    ## Cygwin encloses executable file in parentheses.
    ## Note many of the options added herein will probably not work with non-xterm x-terminal-emulators.
    ## Should encapsulate this in a function.
    declare xtermExe=$( type x-terminal-emulator lxterm uxterm xterm 2>/dev/null | awk '/is .* (builtin|aliased|function)/ { print $1; exit; } { print $NF; exit; }' | tr -cd 'a-zA-Z0-9_/-' ) ;

    #xtermLaunchDir="$HOME/.x-terminal-emulator"
    ##### USE ABOVE INSTEAD WHEN LOGGING IS ENABLED TO AVOID
    ##### CLUTTERING YOUR HOME DIRECTORY!
    ##### Empty string/undef doesn't switch directories at all.
    declare xtermLaunchDir="" # "$HOME"

    [[ -d "$xtermLaunchDir" ]] && cd $xtermLaunchDir ;

    declare xResources="$HOME/.Xdefaults" ;
    declare xResourcesDotD="${xResources}.d/" ;

    [[ -f "$xResources"     ]] && xrdb -I$HOME -I$xResourcesDotD $xResources ;

    declare xtermArgs=$( (( SKIP_ALL_CUSTOM_ARGS )) && __configureXtermArgs || echo ) ;

    declare commandLine="exec nohup $xtermExe $xtermArgs &> /dev/null &"

    echo -e "\n\t$commandLine" > /dev/stderr

    eval $commandLine
} ;

( __main $* ; )

